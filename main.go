package main

import (
	"github.com/SlyCreator/BambooInvest-gRPC-Api/rest-api/controllers/Auth"
	"github.com/SlyCreator/BambooInvest-gRPC-Api/rest-api/repository"
	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
	_ "github.com/swaggo/gin-swagger/example/basic/docs" // docs is generated by Swag CLI, you have to import it.
	"gorm.io/gorm"
)

var (
	db             *gorm.DB                  = config.OpenDatabaseConnection()

	authRepository repository.AuthRepository = repository.NewAuthRepository(db)
	authService    service.AuthService       = service.NewAuthService(authRepository)
	jwtService     service.JWTService        = service.NewJWTService()
	authController Auth.AuthController       = Auth.NewAuthController(authService, jwtService)
)

// @title Swagger Example API
// @version 1.0
// @description This is a sample server Petstore server.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host petstore.swagger.io
// @BasePath /v2
func main() {
	r := gin.Default()

	url := ginSwagger.URL("http://localhost:8080/swagger/doc.json") // The url pointing to API definition
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))

	router := r.Group("v1/api")
	guestRoute := router.Group("/")
	{
		guestRoute.POST("/register",authController.Register)
		guestRoute.POST("/login",authController.Login)
		guestRoute.POST("/password/email",authController.VerifyNumber)
		guestRoute.POST("/password/check_token",authController.VerifyNumber)
		guestRoute.POST("/password/change_password",authController.ForgetPassword)

		authRoute := router.Group("/")
		{
			authRoute.POST("/logout",authController.Register)
			//guestRoute.POST("/update_fcm/{userId}",authController.Register)
			authRoute.POST("/referral",authController.Register)
			authRoute.POST("/referral",authController.Register)
			authRoute.POST("/update",authController.Register)

			profileRoute := router.Group("/profile")
			{
				profileRoute.POST("/update",authController.Register)
			}
		}
	}

	r.Run(":2021")
}